version: '3.8'

services:
  mailsender:
    image: ruanlopes1350/mailsender:latest
    container_name: mailsender_app

    # Política de restart - reinicia apenas em caso de falha
    restart: unless-stopped

    # Mapeamento de portas (HOST:CONTAINER)
    ports:
      - "${HOST_PORT:-5016}:5016"

    # Variáveis de ambiente
    environment:
      NODE_ENV: production
      PORT: 5016
      DB_URL: ${DB_URL}
      SENDER_EMAIL: ${SENDER_EMAIL}
      SENDER_PASSWORD: ${SENDER_PASSWORD}
      MASTER_KEY: ${MASTER_KEY}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_USERNAME: ${ADMIN_USERNAME}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      TZ: America/Sao_Paulo

    # Arquivo .env (recomendado)
    env_file:
      - .env

    # Healthcheck para monitorar o status do container
    healthcheck:
      test: [ "CMD", "node", "-e", "require('http').get('http://localhost:5015/api', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Limites de recursos (ajuste conforme necessário)
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

    # Configuração de logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    # Rede personalizada
    networks:
      - mailsender-network
    # Volumes (opcional - descomente se precisar persistir dados)
    # volumes:
    #   - mailsender-data:/app/data
    #   - ./logs:/app/logs

    # Definição de redes
networks:
  mailsender-network:
    driver: bridge
    name: mailsender-network

# Definição de volumes (opcional)
# volumes:
#   mailsender-data:
#     driver: local
#     name: mailsender-data
